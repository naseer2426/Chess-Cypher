{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","props","windowUpdateDimensions","setState","height","window","innerHeight","width","innerWidth","componentDidMount","addEventListener","getFENString","base64Object","keys","Object","square","fenString","all","dots","i","length","piece","currKey","sum","toString","slice","hashFunction","text","base64","Buffer","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","currLetter","console","log","download","myBoard","document","getElementsByClassName","html2canvas","myCanvas","image","toDataURL","replace","download_link","getElementById","href","click","textChanged","currText","target","value","board","render","style","state","overflowX","className","Prepend","Text","id","aria-label","aria-describedby","onChange","position","allowDrag","draggable","transitionDuration","variant","size","onClick","bind","React","Component","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af15062b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n    Container,\n    InputGroup,\n    Row,\n    FormControl,\n    Spinner,\n    Button,\n    ProgressBar\n} from \"react-bootstrap\";\nimport Chessboard from \"chessboardjsx\";\nimport html2canvas from \"html2canvas\";\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: \"\"\n        };\n        this.windowUpdateDimensions = this.windowUpdateDimensions.bind(this);\n    }\n    windowUpdateDimensions = () => {\n        this.setState({\n            height: window.innerHeight,\n            width: window.innerWidth\n        });\n    };\n    componentDidMount = () => {\n        window.addEventListener(\"resize\", this.windowUpdateDimensions);\n    };\n\n    getFENString = base64Object => {\n        var keys = Object.keys(base64Object);\n        var square = 0;\n        var fenString = \"\";\n        var noSoldier = \"rRnNbBqQkK\";\n        var all = \"rRnNbBqQkKpP\";\n        var dots = 0;\n        for (var i = 0; i < keys.length; i++) {\n            var currKey = keys[i];\n            var piece;\n            if (base64Object[currKey]) {\n                var sum = base64Object[currKey];\n\n                if (square < 8 || square > 55) {\n                    if (dots) {\n                        piece =\n                            dots.toString() + noSoldier[sum % noSoldier.length];\n                    } else {\n                        piece = noSoldier[sum % noSoldier.length];\n                    }\n                } else {\n                    if (dots) {\n                        piece = dots.toString() + all[sum % all.length];\n                    } else {\n                        piece = all[sum % all.length];\n                    }\n                }\n                dots = 0;\n            } else {\n                dots += 1;\n                piece = \"\";\n            }\n\n            if (square != 0 && (square + 1) % 8 == 0) {\n                if (dots) {\n                    fenString += dots.toString() + \"/\";\n                    dots = 0;\n                } else {\n                    fenString += piece + \"/\";\n                }\n            } else {\n                fenString += piece;\n            }\n            // if (square==63){\n            //   if dots\n            // }\n            square += 1;\n        }\n        return fenString.slice(0, fenString.length - 1);\n    };\n\n    hashFunction = text => {\n        var buff = new Buffer(text);\n        var base64 = buff.toString(\"base64\");\n        var base64Object = {\n            A: 0,\n            B: 0,\n            C: 0,\n            D: 0,\n            E: 0,\n            F: 0,\n            G: 0,\n            H: 0,\n            I: 0,\n            J: 0,\n            K: 0,\n            L: 0,\n            M: 0,\n            N: 0,\n            O: 0,\n            P: 0,\n            Q: 0,\n            R: 0,\n            S: 0,\n            T: 0,\n            U: 0,\n            V: 0,\n            W: 0,\n            X: 0,\n            Y: 0,\n            Z: 0,\n            a: 0,\n            b: 0,\n            c: 0,\n            d: 0,\n            e: 0,\n            f: 0,\n            g: 0,\n            h: 0,\n            i: 0,\n            j: 0,\n            k: 0,\n            l: 0,\n            m: 0,\n            n: 0,\n            o: 0,\n            p: 0,\n            q: 0,\n            r: 0,\n            s: 0,\n            t: 0,\n            u: 0,\n            v: 0,\n            w: 0,\n            x: 0,\n            y: 0,\n            z: 0,\n            0: 0,\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0,\n            \"+\": 0,\n            \"/\": 0\n        };\n\n        for (var i = 0; i < base64.length; i++) {\n            var currLetter = base64[i];\n            if (currLetter != \"=\") {\n                base64Object[currLetter] += i + 1;\n            }\n        }\n        console.log(base64);\n        return this.getFENString(base64Object);\n    };\n    download = async e => {\n        var myBoard = document.getElementsByClassName(\"chessBoard\")[0];\n        var myCanvas = await html2canvas(myBoard);\n        var image = myCanvas\n            .toDataURL(\"image/png\", 1.0)\n            .replace(\"image/png\", \"image/octet-stream\");\n        var download_link = document.getElementById(\"download\");\n        download_link.download = \"ChessCyper.png\";\n        download_link.href = image;\n        download_link.click();\n    };\n    textChanged = e => {\n        var currText = e.target.value;\n        if (currText == \"\") {\n            this.setState({ board: \"\" });\n        } else {\n            this.setState({ board: this.hashFunction(currText) });\n        }\n        // console.log(this.hashFunction(currText));\n    };\n    render = () => {\n        return (\n            <Container style={{ width: this.state.width, overflowX: \"hidden\" }}>\n                <Row className=\"text-center\">\n                    <Container className=\"text-center Header\">\n                        <h1>Naseer's Chess Cypher</h1>\n                    </Container>\n                </Row>\n                <Row>\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text id=\"inputGroup-sizing-default\">\n                                Input String\n                            </InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            aria-label=\"Default\"\n                            aria-describedby=\"inputGroup-sizing-default\"\n                            onChange={this.textChanged}\n                        />\n                    </InputGroup>\n                </Row>\n                <Row>\n                    <Container className=\"chessBoard\">\n                        <Chessboard\n                            position={this.state.board}\n                            allowDrag={() => false}\n                            draggable={false}\n                            transitionDuration={0}\n                        ></Chessboard>\n                    </Container>\n                </Row>\n                <Row>\n                    <Container className=\"chessBoard\">\n                        <Button\n                            variant=\"outline-dark\"\n                            className=\"download\"\n                            size=\"lg\"\n                            onClick={this.download}\n                        >\n                            Download\n                        </Button>\n                    </Container>\n                </Row>\n            </Container>\n        );\n    };\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}